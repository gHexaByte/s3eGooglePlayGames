/*
 * android-specific implementation of the s3eGooglePlayGames extension.
 * Add any platform-specific functionality here.
 */
/*
 * NOTE: This file was originally written by the extension builder, but will not
 * be overwritten (unless --force is specified) and is intended to be modified.
 */
#include "s3eGooglePlayGames_internal.h"

#include "s3eEdk.h"
#include "s3eEdk_android.h"
#include <jni.h>
#include "IwDebug.h"

static jobject g_Obj;
static jmethodID g_s3eGPGInitialize;
static jmethodID g_s3eGPGDeInitialize;
static jmethodID g_s3eGPGRegisterCallback;
static jmethodID g_s3eGPGUnRegisterCallback;
static jmethodID g_s3eGPGUnlockAchievement;
static jmethodID g_s3eGPGUnlockIncrementalAchievement;
static jmethodID g_s3eGPGShowAchievementsUI;
static jmethodID g_s3eGPGSubmitLeaderboardScore;
static jmethodID g_s3eGPGShowLeaderboardUI;
static jmethodID g_s3eGPGIsSignedIn;
static jmethodID g_s3eGPGShowAllLeaderBoardsUI;

// JNI callback prototypes

void s3eGPG_INITIALIZATION( JNIEnv* env,  jobject obj, jint status, jstring errorMsg);

s3eResult s3eGooglePlayGamesInit_platform()
{
    // Get the environment from the pointer
    JNIEnv* env = s3eEdkJNIGetEnv();
    jobject obj = NULL;
    jmethodID cons = NULL;

    // Get the extension class
    jclass cls = env->FindClass("com/ideaworks3d/marmalade/s3egoogleplaygames/s3eGooglePlayGames");//s3eEdkAndroidFindClass("com/ideaworks3d/marmalade/s3egoogleplaygames/s3eGooglePlayGames");
    if (!cls)
        goto fail;

    // Get its constructor
    cons = env->GetMethodID(cls, "<init>", "()V");
    if (!cons)
        goto fail;

    // Construct the java class
    obj = env->NewObject(cls, cons);
    if (!obj)
        goto fail;

    // Get all the extension methods
    g_s3eGPGInitialize = env->GetMethodID(cls, "s3eGPGInitialize", "()I");
    if (!g_s3eGPGInitialize)
        goto fail;

    g_s3eGPGDeInitialize = env->GetMethodID(cls, "s3eGPGDeInitialize", "()V");
    if (!g_s3eGPGDeInitialize)
        goto fail;

    g_s3eGPGRegisterCallback = env->GetMethodID(cls, "s3eGPGRegisterCallback", "()V");
    if (!g_s3eGPGRegisterCallback)
        goto fail;

    g_s3eGPGUnRegisterCallback = env->GetMethodID(cls, "s3eGPGUnRegisterCallback", "()V");
    if (!g_s3eGPGUnRegisterCallback)
        goto fail;

    g_s3eGPGUnlockAchievement = env->GetMethodID(cls, "s3eGPGUnlockAchievement", "(Ljava/lang/String;)V");
    if (!g_s3eGPGUnlockAchievement)
        goto fail;

    g_s3eGPGUnlockIncrementalAchievement = env->GetMethodID(cls, "s3eGPGUnlockIncrementalAchievement", "(Ljava/lang/String;I)V");
    if (!g_s3eGPGUnlockIncrementalAchievement)
        goto fail;

    g_s3eGPGShowAchievementsUI = env->GetMethodID(cls, "s3eGPGShowAchievementsUI", "()V");
    if (!g_s3eGPGShowAchievementsUI)
        goto fail;

    g_s3eGPGSubmitLeaderboardScore = env->GetMethodID(cls, "s3eGPGSubmitLeaderboardScore", "(Ljava/lang/String;I)V");
    if (!g_s3eGPGSubmitLeaderboardScore)
        goto fail;

    g_s3eGPGShowLeaderboardUI = env->GetMethodID(cls, "s3eGPGShowLeaderboardUI", "(Ljava/lang/String;)V");
    if (!g_s3eGPGShowLeaderboardUI)
        goto fail;

	g_s3eGPGIsSignedIn = env->GetMethodID(cls, "s3eGPGIsSignedIn", "()Z");
    if (!g_s3eGPGIsSignedIn)
        goto fail;
		
	g_s3eGPGShowAllLeaderBoardsUI = env->GetMethodID(cls, "s3eGPGShowAllLeaderBoardsUI", "()V");
    if (!g_s3eGPGShowAllLeaderBoardsUI)
        goto fail;	

	// Non-autogenerated - register the native hooks
    {
		// register native callbacks on the activity class
		jclass clsFragment = s3eEdkAndroidFindClass("com/ideaworks3d/marmalade/s3egoogleplaygames/s3eGooglePlayGamesActivity");
													
		if (!clsFragment)
			goto fail;

        static const JNINativeMethod methods[]=
        {
			{"native_INITIALIZATION",				"(ILjava/lang/String;)V",													(void*)&s3eGPG_INITIALIZATION},		
		};
        jint ret = env->RegisterNatives(clsFragment, methods, sizeof(methods)/sizeof(methods[0]));
		if (ret)
		{
			IwTrace(AMAZONGAMECIRCLE, ("GOOGLEPLAYGAMES: RegisterNatives failed error:%d in s3eGooglePlayGamesInit_platform",ret));
            goto fail;
		}
	}

    IwTrace(GOOGLEPLAYGAMES, ("GOOGLEPLAYGAMES init success"));
    g_Obj = env->NewGlobalRef(obj);
    env->DeleteLocalRef(obj);
    env->DeleteLocalRef(cls);

    // Add any platform-specific initialisation code here
    return S3E_RESULT_SUCCESS;

fail:
    jthrowable exc = env->ExceptionOccurred();
    if (exc)
    {
        env->ExceptionDescribe();
        env->ExceptionClear();
        IwTrace(s3eGooglePlayGames, ("GOOGLEPLAYGAMES: One or more java methods could not be found"));
    }
    return S3E_RESULT_ERROR;

}

void s3eGooglePlayGamesTerminate_platform()
{
	JNIEnv* env = s3eEdkJNIGetEnv();
	jclass cls = s3eEdkAndroidFindClass("s3eGooglePlayGames");
	env->DeleteGlobalRef(cls);
}

s3eResult s3eGPGInitialize_platform()
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_s3eGPGInitialize);
}

void s3eGPGDeInitialize_platform()
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    env->CallVoidMethod(g_Obj, g_s3eGPGDeInitialize);
}

void s3eGPGRegisterCallback_platform(s3eGPGCallbackType callbackID, s3eCallback callbackFn, void* userData)
{
	// We intercept and register the callback here
	s3eEdkCallbacksRegister(S3E_EXT_GOOGLEPLAYGAMES_HASH,
                            S3EGPG_MAX_ID,
                            callbackID,
                            callbackFn,
                            userData,
                            S3E_FALSE);
    //JNIEnv* env = s3eEdkJNIGetEnv();
    //env->CallVoidMethod(g_Obj, g_s3eGPGRegisterCallback);
}

void s3eGPGUnRegisterCallback_platform(s3eGPGCallbackType callbackID, s3eCallback callbackFn)
{
		// We intercept and register the callback here
	s3eEdkCallbacksUnRegister(S3E_EXT_GOOGLEPLAYGAMES_HASH, 
							  S3EGPG_MAX_ID, 
							  callbackID, 
							  callbackFn);
    //JNIEnv* env = s3eEdkJNIGetEnv();
    //env->CallVoidMethod(g_Obj, g_s3eGPGUnRegisterCallback);
}

void s3eGPGUnlockAchievement_platform(const char* id)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring id_jstr = env->NewStringUTF(id);
    env->CallVoidMethod(g_Obj, g_s3eGPGUnlockAchievement, id_jstr);
}

void s3eGPGUnlockIncrementalAchievement_platform(const char* id,int increment)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring id_jstr = env->NewStringUTF(id);
    env->CallVoidMethod(g_Obj, g_s3eGPGUnlockIncrementalAchievement, id_jstr, increment);
}

void s3eGPGShowAchievementsUI_platform()
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    env->CallVoidMethod(g_Obj, g_s3eGPGShowAchievementsUI);
}

void s3eGPGSubmitLeaderboardScore_platform(const char* leaderboardID, int score)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring id_jstr = env->NewStringUTF(leaderboardID);
    env->CallVoidMethod(g_Obj, g_s3eGPGSubmitLeaderboardScore, id_jstr, score);
}

void s3eGPGShowLeaderboardUI_platform(const char* leaderboardID)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring id_jstr = env->NewStringUTF(leaderboardID);
	env->CallVoidMethod(g_Obj, g_s3eGPGShowLeaderboardUI, id_jstr);
}

bool s3eGPGIsSignedIn_platform()
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (bool)env->CallBooleanMethod(g_Obj, g_s3eGPGIsSignedIn);
}

void s3eGPGShowAllLeaderBoardsUI_platform()
{

  JNIEnv* env = s3eEdkJNIGetEnv();
    env->CallVoidMethod(g_Obj, g_s3eGPGShowAllLeaderBoardsUI);

}

// Native callbacks from Java http://192.9.162.55/docs/books/jni/html/objtypes.html

// helper functions

static char* JStringToChar( JNIEnv* env, jstring str )
{
	if( str )
	{
		jsize len = env->GetStringLength( str );

		const char* utf=env->GetStringUTFChars( str, NULL );
		char* retval = new char[ len + 1 ];
		memcpy( retval, utf, len + 1 );
		env->ReleaseStringUTFChars( str, utf );
		
		return retval;
	}

	return NULL;
}

// completion handler
static void s3eGPG_DeallocateInitialization(uint32 extID, int32 notification, void *systemData, void *instance, int32 returnCode, void *completeData)
{
	s3eGPGInitializationResult *res = (s3eGPGInitializationResult*)systemData;
	if (res->errorMsg)
		delete []res->errorMsg;
	delete res;
}

// The actual callbacks and their memory handling functions

void s3eGPG_INITIALIZATION( JNIEnv* env,  jobject obj, jint status, jstring errorMsg) 
{
	s3eGPGInitializationResult *initResult = new s3eGPGInitializationResult();
	initResult->status = (s3eGPGInitializationResultEnum)status;
	initResult->errorMsg = JStringToChar(env,errorMsg);
	s3eEdkCallbacksEnqueue(S3E_EXT_GOOGLEPLAYGAMES_HASH,S3EGPG_INITIALIZATION,initResult,0,NULL,false,s3eGPG_DeallocateInitialization,initResult);
}


